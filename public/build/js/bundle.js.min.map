{"version":3,"sources":["horas.js","ponentes.js","tags.js"],"names":["document","querySelector","busqueda","categoria_id","dia","categoria","dias","querySelectorAll","inputHiddenDia","inputHiddenHora","terminoBusqueda","e","target","name","value","horaPrevia","classList","remove","Object","values","includes","async","url","resultado","fetch","eventos","listadoHoras","forEach","li","add","removeEventListener","seleccionarHora","horasTomadas","map","evento","hora_id","listadoHorasArray","Array","from","filter","dataset","horaId","addEventListener","obtenerHorasDisponibles","json","buscarEventos","ponentesInput","ponentes","ponentesFiltrados","respuesta","arrayPonentes","ponente","nombre","trim","apellido","id","formatearPonentes","obtenerPonentes","length","expresion","RegExp","toLowerCase","search","console","log","tagsInput","tagsDiv","tagsInputHidden","tags","mostrarTags","textContent","tag","etiqueta","createElement","ondblclick","eliminarTag","appendChild","actualizarInputHidden","toString","split","keyCode","preventDefault"],"mappings":"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","file":"bundle.js","sourcesContent":["(function () {\r\n    const horas = document.querySelector('#horas');\r\n\r\n    if (horas) {\r\n        let busqueda = {\r\n            categoria_id: '',\r\n            dia: ''\r\n        };\r\n\r\n        const categoria = document.querySelector('[name=\"categoria_id\"]');\r\n        const dias = document.querySelectorAll('[name=\"dia\"]');\r\n        const inputHiddenDia = document.querySelector('[name=\"dia_id\"]');\r\n        const inputHiddenHora = document.querySelector('[name=\"hora_id\"]');\r\n\r\n        categoria.addEventListener('change', terminoBusqueda);\r\n        dias.forEach(dia => dia.addEventListener('change', terminoBusqueda));\r\n\r\n        function terminoBusqueda(e) {\r\n            busqueda[e.target.name] = e.target.value;\r\n\r\n            //Reiniciar los campos ocultos y el selector de horas\r\n            inputHiddenHora.value = '';\r\n            inputHiddenDia.value = '';\r\n\r\n            const horaPrevia = document.querySelector('.horas__hora--seleccionada');\r\n            if (horaPrevia) {\r\n                horaPrevia.classList.remove('horas__hora--seleccionada');\r\n            }\r\n\r\n            if (Object.values(busqueda).includes('')) {\r\n                return;\r\n            }\r\n\r\n            buscarEventos();\r\n        }\r\n\r\n        async function buscarEventos() {\r\n            const { dia, categoria_id } = busqueda;\r\n            const url = `/api/eventos-horario?dia_id=${dia}&categoria_id=${categoria_id}`;\r\n\r\n            const resultado = await fetch(url);\r\n            const eventos = await resultado.json();\r\n            obtenerHorasDisponibles(eventos);\r\n        }\r\n\r\n        function obtenerHorasDisponibles(eventos) {\r\n            //Reiniciar las horas\r\n            const listadoHoras = document.querySelectorAll('#horas li');\r\n            listadoHoras.forEach(li => {\r\n                li.classList.add('horas__hora--deshabilitada');\r\n                // Remover event listener previo para evitar conflictos\r\n                li.removeEventListener('click', seleccionarHora);\r\n            });\r\n\r\n            //Comprobar eventos ya tomados, quitar la clase de deshabilitado\r\n            const horasTomadas = eventos.map(evento => evento.hora_id);\r\n            const listadoHorasArray = Array.from(listadoHoras);\r\n\r\n            const resultado = listadoHorasArray.filter(li => !horasTomadas.includes(li.dataset.horaId));\r\n\r\n            resultado.forEach(li => {\r\n                li.classList.remove('horas__hora--deshabilitada');\r\n                li.addEventListener('click', seleccionarHora); // Agregar event listener solo a las horas disponibles\r\n            });\r\n        }\r\n\r\n        function seleccionarHora(e) {\r\n            //Deshabilitar hora previa si se da click en otra\r\n            const horaPrevia = document.querySelector('.horas__hora--seleccionada');\r\n            if (horaPrevia) {\r\n                horaPrevia.classList.remove('horas__hora--seleccionada');\r\n            }\r\n\r\n            //Agregar clase de seleccionado\r\n            e.target.classList.add('horas__hora--seleccionada');\r\n\r\n            inputHiddenHora.value = e.target.dataset.horaId;\r\n\r\n            //Llenar el campo oculto de dia\r\n            inputHiddenDia.value = document.querySelector('[name=\"dia\"]:checked').value;\r\n        }\r\n    }\r\n})();\r\n","(function () {\r\n    const ponentesInput = document.querySelector('#ponentes');\r\n    if (ponentesInput) {\r\n        let ponentes = [];\r\n        let ponentesFiltrados = [];\r\n\r\n        obtenerPonentes();\r\n\r\n        ponentesInput.addEventListener('input', buscarPonentes);\r\n\r\n        async function obtenerPonentes() {\r\n            const url = '/api/ponentes';\r\n            const respuesta = await fetch(url);\r\n            const resultado = await respuesta.json();\r\n            formatearPonentes(resultado);\r\n        }\r\n\r\n        function formatearPonentes(arrayPonentes = []) {\r\n            ponentes = arrayPonentes.map(ponente => {\r\n                return {\r\n                    nombre: `${ponente.nombre.trim()} ${ponente.apellido.trim()}`,\r\n                    id: ponente.id\r\n                }\r\n            })\r\n        }\r\n\r\n        function buscarPonentes(e) {\r\n            const busqueda = e.target.value;\r\n            if (busqueda.length > 3) {\r\n                //Expresion regular para buscar coincidencias\r\n                const expresion = new RegExp(busqueda, \"i\");\r\n                ponentesFiltrados = ponentes.filter(ponente => {\r\n                    if (ponente.nombre.toLowerCase().search(expresion) != -1) {\r\n                        return ponente;\r\n                    }\r\n                })\r\n                console.log(ponentesFiltrados);\r\n            }\r\n        }\r\n    }\r\n})();","(function () { // EFI (Expresión de función invocada) - IIFE (Immediately Invoked Function Expression) - Función anónima autoejecutable - Closure - Módulo\r\n    const tagsInput = document.querySelector('#tags_input');\r\n\r\n    if (tagsInput) {\r\n        tagsDiv = document.querySelector('#tags');\r\n        tagsInputHidden = document.querySelector('[name=\"tags\"]');\r\n        let tags = [];\r\n\r\n        //Recuperar del input hidden los tags que ya existen\r\n\r\n        if(tagsInputHidden.value !== '') {\r\n            tags = tagsInputHidden.value.split(',');\r\n            mostrarTags();\r\n        }\r\n\r\n        //Escuchar los cambios en el input \r\n        tagsInput.addEventListener('keypress', guardarTag);\r\n\r\n        function guardarTag(e) {\r\n            if (e.keyCode === 44) {\r\n                if (e.target.value.trim() === '' || e.target.value < 1) {\r\n                    return;\r\n                }\r\n                e.preventDefault();\r\n                tags = [...tags, e.target.value.trim()];\r\n                tagsInput.value = '';\r\n\r\n                mostrarTags();\r\n            }\r\n        }\r\n\r\n        function mostrarTags() {\r\n            tagsDiv.textContent = '';\r\n            tags.forEach(tag => {\r\n                const etiqueta = document.createElement('LI');\r\n                etiqueta.classList.add('formulario__tag');\r\n                etiqueta.textContent = tag;\r\n                etiqueta.ondblclick = eliminarTag;\r\n                tagsDiv.appendChild(etiqueta);\r\n            })\r\n            actualizarInputHidden();\r\n        }\r\n\r\n        function eliminarTag(e) {\r\n            e.target.remove();\r\n            tags = tags.filter(tag => tag !== e.target.textContent);\r\n            actualizarInputHidden();\r\n        }\r\n\r\n        function actualizarInputHidden() {\r\n            tagsInputHidden.value = tags.toString();\r\n        }\r\n    }\r\n})();"]}